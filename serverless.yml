# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: wordless
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: wordlesss-backend-rest-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: wordless-backend-rest-api

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:PutObject
            - s3:GetObject
            - lambda:InvokeFunction            
          Resource:
            - Fn::GetAtt: [UserTable, Arn]
            - Fn::GetAtt: [EmoteReactionTable, Arn]
            - Fn::GetAtt: [UserSubTable, Arn]
            - Fn::GetAtt: [UserSukiTable, Arn]
            - arn:aws:s3:::${env:USER_IMAGE_BUCKET}/*
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:TOKEN_VALIDATOR_LAMBDA_NAME}
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:TOKEN_VALIDATOR_AND_GET_USER_SUB_LAMBDA_NAME}
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:POST_FOLLOW_LAMBDA_NAME}
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:DELETE_FOLLOW_LAMBDA_NAME}
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:DELETE_EMOTE_LAMBDA_NAME}
            - arn:aws:lambda:${env:MY_AWS_REGION}:${aws:accountId}:function:${env:DELETE_USER_LAMBDA_NAME}
  environment:
    EMOTE_REACTION_TABLE: emote-reaction-table-${sls:stage}
    USER_TABLE: user-table-${sls:stage}
    USER_SUB_TABLE: user-sub-table-${sls:stage}
    USER_SUKI_TABLE: user-suki-table-${sls:stage}
    DEPLOY_ENV: ${sls:stage}
    DB_HOST: ${env:DB_HOST}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}
    FRONTEND_URL: ${self:custom.frontend-url.${sls:stage}}
    COGNITO_AUTHORIZER_ID: ${env:COGNITO_AUTHORIZER_ID}
    MY_AWS_REGION: ${env:MY_AWS_REGION}
    USER_IMAGE_BUCKET: ${env:USER_IMAGE_BUCKET}
    CLOUDFRONT_USER_IMAGE_URL: ${env:CLOUDFRONT_USER_IMAGE_URL}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    TOKEN_VALIDATOR_LAMBDA_NAME: ${env:TOKEN_VALIDATOR_LAMBDA_NAME}
    TOKEN_VALIDATOR_AND_GET_USER_SUB_LAMBDA_NAME: ${env:TOKEN_VALIDATOR_AND_GET_USER_SUB_LAMBDA_NAME}
    POST_FOLLOW_LAMBDA_NAME: ${env:POST_FOLLOW_LAMBDA_NAME}
    DELETE_FOLLOW_LAMBDA_NAME: ${env:DELETE_FOLLOW_LAMBDA_NAME}
    DELETE_EMOTE_LAMBDA_NAME: ${env:DELETE_EMOTE_LAMBDA_NAME}
    DELETE_USER_LAMBDA_NAME: ${env:DELETE_USER_LAMBDA_NAME}
  # 初回実行時はコメントアウトする
  apiName: wordless-backend-rest-api-${sls:stage}

functions:
  verifyToken:
    handler: app/auth/verifyToken.verifyToken
  verifyTokenAndGetUserSub:
    handler: app/auth/verifyTokenAndGetUserSub.verifyTokenAndGetUserSub
  deleteUserEntry:
    handler: app/user/delete/deleteUserEntry.deleteUserEntry
    events:
      - http:
          path: user/{userId}
          method: delete
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - DELETE
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  deleteUserCore:
    handler: app/user/delete/deleteUserCore.deleteUserCore
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  getUserHandler:
    handler: app/user/findUser.findUser
    events:
      - http:
          path: user/{userId}
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  postUser:
    handler: app/user/postUser.postUser
    events:
      - http:
          path: user/{userId}
          method: post
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  findUserSub:
    handler: app/userSub/findUserSub.findUserSub
    events:
      - http:
          path: userSub/{userSub}
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  postUserName:
    handler: app/user/userName/postUserName.postUserName
    events:
      - http:
          path: user/{userId}/userName
          method: post
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  findUserSuki:
    handler: app/userSuki/findUserSuki.findUserSuki
    events:
      - http:
          path: userSuki/{userId}
          method: get
          cors: 
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  postUserSuki:
    handler: app/userSuki/postUserSuki.postUserSuki
    events:
      - http:
          path: userSuki/{userId}
          method: post
          cors: 
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  deleteEmoteEntry:
    handler: app/emote/delete/deleteEmoteEntry.deleteEmoteEntry
    events:
      - http:
          path: emote/{emoteId}
          method: delete
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - DELETE
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  deleteEmoteCore:
    handler: app/emote/delete/deleteEmoteCore.deleteEmoteCore
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  fetchEmotes:
    handler: app/emotes/fetchEmotes.fetchEmotes
    events:
      - http:
          path: emotes/
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  fetchFollow:
    handler: app/follow/fetchFollow.fetchFollow
    events:
      - http:
          path: follow/{userId}
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  postFollowEntry:
    handler: app/follow/post/postFollowEntry.postFollowEntry
    events:
      - http:
          path: follow/{userId}
          method: post
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  postFollowCore:
    handler: app/follow/post/postFollowCore.postFollowCore
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  deleteFollowEntry:
    handler: app/follow/delete/deleteFollowEntry.deleteFollowEntry
    events:
      - http:
          path: follow/{userId}
          method: delete
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - DELETE
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
  deleteFollowCore:
    handler: app/follow/delete/deleteFollowCore.deleteFollowCore
    vpc:
      securityGroupIds: ${self:custom.lambda-security-group-id.${sls:stage}}
      subnetIds:
        - ${self:custom.public_subnet_id_a.${sls:stage}}
        - ${self:custom.public_subnet_id_b.${sls:stage}}
  postUserImageUploadUrl:
    handler: app/userImage/postUserImageUploadUrl.postUserImageUploadUrl
    events:
      - http:
          path: userImage/{userId}/uploadUrl
          method: post
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}

resources:
  Conditions:
    IsOffline: !Equals ["${sls:stage}", "offline"]
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - ${env:COGNITO_USER_POOL_ARN}
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-table-${sls:stage}
    UserSubTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userSub
            AttributeType: S
        KeySchema:
          - AttributeName: userSub
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-sub-table-${sls:stage}
    UserSukiTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-suki-table-${sls:stage}
    EmoteReactionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: emoteReactionId
            AttributeType: S
        KeySchema:
          - AttributeName: emoteReactionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: emote-reaction-table-${sls:stage}

plugins:
  - serverless-dynamodb
  - serverless-offline

custom:
  lambda-security-group-id:
    offline: ${env:LAMBDA_SECURITY_GROUP_ID}
    dev: ${env:LAMBDA_SECURITY_GROUP_ID}
    prod: ${env:LAMBDA_SECURITY_GROUP_ID}
  public_subnet_id_a:
    offline: ${env:VPC_PUBLIC_SUBNET_ID_A}
    dev: ${env:VPC_PUBLIC_SUBNET_ID_A}
    prod: ${env:VPC_PUBLIC_SUBNET_ID_A}
  public_subnet_id_b:
    offline: ${env:VPC_PUBLIC_SUBNET_ID_B}
    dev: ${env:VPC_PUBLIC_SUBNET_ID_B}
    prod: ${env:VPC_PUBLIC_SUBNET_ID_B}
  frontend-url:
    offline: http://localhost:3000
    dev: http://localhost:3000
    prod: https://main.d2k4f3iskqkv6l.amplifyapp.com
  serverless-dynamodb:
    stages:
      - offline
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    
    seed:
      dev:
        sources:
          - table: user-table-offline
            sources: [./seed/user-table-offline.json]
          - table: emote-reaction-table-offline
            sources: [./seed/emote-reaction-table-offline.json]
          - table: user-sub-table-offline
            sources: [./seed/user-sub-table-offline.json]
          - table: user-suki-table-offline
            sources: [./seed/user-suki-table-offline.json]
