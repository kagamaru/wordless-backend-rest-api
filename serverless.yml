# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: wordless
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: wordlesss-backend-rest-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: wordless-backend-rest-api

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [EmoteReactionTable, Arn]
            - Fn::GetAtt: [UserSubTable, Arn]
  environment:
    EMOTE_REACTION_TABLE: emote-reaction-table-${sls:stage}
    USERS_TABLE: users-table-${sls:stage}
    USER_SUB_TABLE: user-sub-table-${sls:stage}
    DEPLOY_ENV: ${sls:stage}
    DB_HOST: ${env:DB_HOST}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}
    FRONTEND_URL: ${self:custom.frontend-url.${sls:stage}}
    ALLOW_ORIGIN: ${self:custom.frontend-url.offline}
    COGNITO_AUTHORIZER_ID: ${env:COGNITO_AUTHORIZER_ID}
  # 初回実行時はコメントアウトする
  apiName: wordless-backend-rest-api-${sls:stage}

functions:
  getUserHandler:
    handler: app/users/findUser.findUser
    events:
      - http:
          path: users/{userId}
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
    vpc:
      securityGroupIds: ${self:custom.security-group-id.${sls:stage}}
      subnetIds: ${self:custom.vpc_subnet_id.${sls:stage}}
  findUserSub:
    handler: app/users/findUserSub.findUserSub
    events:
      - http:
          path: users/sub/{userSub}
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
    vpc:
      securityGroupIds: ${self:custom.security-group-id.${sls:stage}}
      subnetIds: ${self:custom.vpc_subnet_id.${sls:stage}}
  fetchEmotes:
    handler: app/emotes/fetchEmotes.fetchEmotes
    events:
      - http:
          path: emotes/
          method: get
          cors:
            origin: ${env:FRONTEND_URL}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Requested-With
            methods:
              - GET
              - POST
              - OPTIONS
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${env:COGNITO_AUTHORIZER_ID}
    vpc:
      securityGroupIds: ${self:custom.security-group-id.${sls:stage}}
      subnetIds: ${self:custom.vpc_subnet_id.${sls:stage}}

resources:
  Conditions:
    IsOffline: !Equals ["${sls:stage}", "offline"]
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - ${env:COGNITO_USER_POOL_ARN}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: users-table-${sls:stage}
    UserSubTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userSub
            AttributeType: S
        KeySchema:
          - AttributeName: userSub
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-sub-table-${sls:stage}
    EmoteReactionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: emoteReactionId
            AttributeType: S
        KeySchema:
          - AttributeName: emoteReactionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: emote-reaction-table-${sls:stage}

plugins:
  - serverless-dynamodb
  - serverless-offline

custom:
  security-group-id:
    offline: ${env:VPC_SECURITY_GROUP_ID}
    dev: ${env:VPC_SECURITY_GROUP_ID}
    prod: ${env:VPC_SECURITY_GROUP_ID}
  vpc_subnet_id:
    offline: ${env:VPC_SUBNET_ID}
    dev: ${env:VPC_SUBNET_ID}
    prod: ${env:VPC_SUBNET_ID}
  frontend-url:
    offline: http://localhost:3000
    dev: https://develop.d2k4f3iskqkv6l.amplifyapp.com
    prod: https://main.d2k4f3iskqkv6l.amplifyapp.com
  serverless-dynamodb:
    stages:
      - offline
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    
    seed:
      dev:
        sources:
          - table: users-table-offline
            sources: [./seed/users-table-offline.json]
          - table: emote-reaction-table-offline
            sources: [./seed/emote-reaction-table-offline.json]
          - table: user-sub-table-offline
            sources: [./seed/user-sub-table-offline.json]
